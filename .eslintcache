[{"/Users/demirzulic/Desktop/Fitness/fitness/src/index.js":"1","/Users/demirzulic/Desktop/Fitness/fitness/src/App.js":"2","/Users/demirzulic/Desktop/Fitness/fitness/src/Inputs.js":"3","/Users/demirzulic/Desktop/Fitness/fitness/src/FoodContext.js":"4","/Users/demirzulic/Desktop/Fitness/fitness/src/MealList.js":"5"},{"size":144,"mtime":1610176114566,"results":"6","hashOfConfig":"7"},{"size":1010,"mtime":1610881629239,"results":"8","hashOfConfig":"7"},{"size":12364,"mtime":1610897353434,"results":"9","hashOfConfig":"7"},{"size":5174,"mtime":1610904777092,"results":"10","hashOfConfig":"7"},{"size":3130,"mtime":1611391245731,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"153metu",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/demirzulic/Desktop/Fitness/fitness/src/index.js",[],["25","26"],"/Users/demirzulic/Desktop/Fitness/fitness/src/App.js",["27"],"import React, { useContext } from 'react'   \nimport ValueContext from './FoodContext'\nimport Inputs from './Inputs'  \nimport MealList from './MealList' \nimport { makeStyles } from '@material-ui/core/styles' \nimport { Grid, Typography } from '@material-ui/core'  \nimport './font.css'\n\nconst useStyles = makeStyles({ \n    fonts: { \n        fontFamily: 'Fredoka One', \n        fontSize: 30\n    }\n})\n\nconst App = () => { \n    const classes = useStyles()\n    return ( \n        <ValueContext>  \n            <Grid container style={{ paddingTop: 50 }}>\n                <Grid item container justify='center'> \n                        <Typography className={classes.fonts}>Foodtracker</Typography> \n                </Grid>\n                <Grid  item container direction='row' justify='space-evenly' alignItems='center' style={{ paddingTop: 80 }}>\n                    <Inputs /> \n                    <MealList />\n                </Grid> \n            </Grid> \n        </ValueContext>\n        \n    )\n}\n\nexport default App\n","/Users/demirzulic/Desktop/Fitness/fitness/src/Inputs.js",[],"/Users/demirzulic/Desktop/Fitness/fitness/src/FoodContext.js",["28","29"],"import React, { createContext, useState } from 'react'  \nimport uuid from 'uuid/v4'\n\nexport const ValueContext = createContext()\n\nconst initialState = {\n        nahrungsmittel: '', \n        kcal: '', \n        protein: '', \n        carbs: '', \n        fette: '',  \n        menge: ''\n} \n\nconst initialTotal = { \n        kcal: 0, \n        protein: 0, \n        carbs: 0, \n        fette: 0, \n        menge: 0, \n} \n\nconst initialTitle = '' \n\nconst initialFood = {  \n        mealName: '', \n        foods: []\n} \n\nconst initialFoodArr = []\n\n\n\nconst FoodContext = (props) => { \n\n    const [inputs, setInputs] = useState(initialState)  \n    const [total, setTotal] = useState(initialTotal) \n    const [food, setFood] = useState(initialFoodArr)    \n    const [title, setTitle] = useState(initialTitle)  \n    const [meal, setMeal] = useState({  \n        mealName: '', \n        foods: []\n    } )\n    const [dailyMeal, setDailyMeal] = useState([])\n\n\n    let foodSetProtein = Number(((inputs.protein)/100)*inputs.menge) \n    let foodSetCalories = Number(((inputs.kcal)/100)*inputs.menge)  \n    let foodSetFat = Number(((inputs.fette)/100)*inputs.menge)  \n    let foodSetCarbs = Number(((inputs.carbs)/100)*inputs.menge) \n   \n\n    const addFood = () => {    \n        food.push({ ...inputs, protein: foodSetProtein, kcal: foodSetCalories, fette: foodSetFat, carbs: foodSetCarbs }) \n\n        let findTotalAmount = food.map((item) => Number(item.menge))  \n        let reduceAmount = findTotalAmount.reduce((a,b) => a + b) \n\n        let findTotalProtein = food.map((item) => Number(item.protein))   \n        let reduceProtein = findTotalProtein.reduce((a,b) => a + b)  \n\n        let findTotalCalories = food.map((item) => Number(item.kcal)) \n        let reduceCalories = findTotalCalories.reduce((a,b) => a + b)  \n\n        let findTotalFat = food.map((item) => Number(item.fette)) \n        let reduceFat = findTotalFat.reduce((a,b) => a + b)  \n\n        let findTotalCarbs = food.map((item) => Number(item.carbs)) \n        let reduceCarbs = findTotalCarbs.reduce((a,b) => a + b)     \n\n       \n\n        setTotal({ ...total, menge: reduceAmount, protein: reduceProtein, kcal: reduceCalories, fette: reduceFat, carbs: reduceCarbs })     \n        setMeal({ id: uuid(), mealName: title, foods: [ ...food ], total: { ...total, menge: reduceAmount, protein: reduceProtein, kcal: reduceCalories, fette: reduceFat, carbs: reduceCarbs }  })   \n        console.log(food)  \n        console.log(inputs.nahrungsmittel)\n        setInputs(initialState) \n        if ( inputs.nahrungsmittel === '' || inputs.kcal === '' || inputs.protein === '' || inputs.carbs === '' || inputs.fette === '' ) { \n            food.pop()  \n        } \n    }   \n\n    const addMeal = () => {  \n       dailyMeal.push({ ...meal }) \n       setMeal(initialFood) \n       setFood([])  \n       setTotal(initialTotal) \n       setTitle('')\n       if (meal['mealName'] === \"\") { \n           dailyMeal.pop()\n       }   \n       dailyMeal.map((single) => {\n       if ( single.total['kcal'] === 0 || single.total['protein'] === 0 || single.total['carbs'] === 0 || single.total['fette'] === 0 || single.total['menge'] === 0 ) { \n           dailyMeal.pop()\n       }} )\n       \n       \n    }\n\n    const handleChange = (props) => (event) => { \n        setInputs({ ...inputs, [props]: event.target.value, id: uuid() }) \n    }   \n    \n    const handleTitle = (event) => { \n        setTitle(event.target.value) \n    }\n\n    const handleSubmit = (event) => { \n        event.preventDefault() \n        setInputs(initialState) \n    }  \n\n    const removeItem = (id) => { \n        setFood(food.filter((item) => item.id !== id)) \n        setInputs(initialState)\n        \n        let findTotalCarbs = food.map((item) => item.id === id ? Number(item.carbs) : null)  \n        let reduceCarbs = findTotalCarbs.reduce((a,b) => a + b)   \n\n        let findTotalProtein = food.map((item) => item.id === id ? Number(item.protein) : null)  \n        let reduceProtein = findTotalProtein.reduce((a,b) => a + b)   \n\n        let findTotalFat = food.map((item) => item.id === id ? Number(item.fette) : null)  \n        let reduceFat = findTotalFat.reduce((a,b) => a + b) \n\n        let findTotalAmount = food.map((item) => item.id === id ? Number(item.menge) : null)  \n        let reduceAmount = findTotalAmount.reduce((a,b) => a + b) \n\n        let findTotalCalories = food.map((item) => item.id === id ? Number(item.kcal) : null)  \n        let reduceCalories = findTotalCalories.reduce((a,b) => a + b)\n\n        setTotal({ ...total, carbs: Number(total.carbs - reduceCarbs), protein: Number(total.protein - reduceProtein), fette: Number(total.fette - reduceFat), menge: Number(total.menge - reduceAmount), kcal: Number(total.kcal - reduceCalories) }) \n        \n        let removeFood = meal.foods.filter((item) => item.id !== id) \n        setMeal({ ...meal, foods: removeFood })\n    }\n\n    \n\n    \n\n    \n\n\n\n\n\n\n\n\n    return (\n        <ValueContext.Provider value={{ inputs, food, total, title, meal, dailyMeal, addFood, addMeal, handleChange, handleTitle, handleSubmit, removeItem }}> \n            {props.children}\n        </ValueContext.Provider>\n    )\n}\n\nexport default FoodContext\n","/Users/demirzulic/Desktop/Fitness/fitness/src/MealList.js",["30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":17,"nodeType":"37","messageId":"38","endLine":1,"endColumn":27},{"ruleId":"35","severity":1,"message":"39","line":44,"column":23,"nodeType":"37","messageId":"38","endLine":44,"endColumn":35},{"ruleId":"40","severity":1,"message":"41","line":92,"column":31,"nodeType":"42","messageId":"43","endLine":92,"endColumn":33},{"ruleId":"35","severity":1,"message":"44","line":26,"column":13,"nodeType":"37","messageId":"38","endLine":26,"endColumn":17},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'setDailyMeal' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'meal' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]